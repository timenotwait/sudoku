import { stateManager } from './stateManager';
import { userGrid } from './grid';
import { backtrack } from './backtrack';
import { candidates as Candidate } from './candidates';

function createUndoRedoManager() {
    const undoList = [];    // 撤销
    const redoList = [];    // 重做
    const backtrackList = [];   // 回溯

    return {
        newAction(index) {
            undoList.push(index);
            // console.log(undoList);
            redoList.length = 0;
        },
        newBranch(index, x, y, num) {
            let backtrackItem = []
            backtrackItem.push(index);
            backtrackItem.push(x);
            backtrackItem.push(y);
            backtrackItem.push(num);
            
            backtrackList.push(backtrackItem);
            console.log('backtrackList');
            console.log(backtrackList);
        },
        undo() {
            if(undoList.length > 1) {
                const oldIndex = undoList.pop();
                // console.log(oldIndex);
                // console.log(stateManager.get_state(undoList[undoList.length-1]));
                userGrid.setGrid(stateManager.get_state(undoList[undoList.length-1]));
                Candidate.syncWithStrategy();
                redoList.push(oldIndex);
            }
            else {
                console.log('Nothing to undo.');
            }
        },
        redo() {
            if(redoList.length > 0) {
                const oldIndex = redoList.pop();
                userGrid.setGrid(stateManager.get_state(oldIndex));
                Candidate.syncWithStrategy();
                undoList.push(oldIndex);
            }
            else {
                console.log('Nothing to redo.');
            }
        },
        returnToBranch() {
            let backtrackItem = backtrackList.pop();
            userGrid.setGrid(stateManager.get_state(backtrackItem[0]));
            Candidate.syncWithStrategy();
            // undoList pop至分支点
            let undoListLastIndex = undoList.length - 1;
            while(undoListLastIndex >= 1 && undoList[undoList.length - 1] != backtrackItem[0]) {
                undoList.pop();
                undoListLastIndex = undoList.length - 1;
            }
            redoList.length = 0;
            backtrack.toggle();
        },
        getUndoListSize() {
            return undoList.length;
        }
    }
}

export const UndoRedoManager = createUndoRedoManager();