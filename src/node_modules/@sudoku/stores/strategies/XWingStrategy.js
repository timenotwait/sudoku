import { StrategyTemplate } from '../strategyTemplate'

export class XWingStrategy extends StrategyTemplate {
    constructor() {
        super("X-Wing Strategy");
    }
  
    // 执行X-Wing策略
    execute(grid, candidates, hint_step) {
        let newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
        // 记录总体移除的候选数
        let totalRemoved = 0;
        const maxIterOfStrategy = hint_step;
        // 设置迭代上限
        for (let i = 0; i < maxIterOfStrategy; i++) {
            let rowXWings = this.findRowXwings(newCandidates);
            let colXWings = this.findColXwings(newCandidates);
            let removed = 0;
            for (let rowXwing of rowXWings) {
                const rowRemoved = this.removeRowCandidate(newCandidates, rowXwing);
                removed += rowRemoved;
            }
            for (let colXwing of colXWings) {
                const colRemoved = this.removeColCandidate(newCandidates, colXwing);
                removed += colRemoved;
            }
            totalRemoved += removed;
            if (removed === 0) {
                break;
            }

        }
        // if (totalRemoved !== 0) {
        //     console.log(`X-Wing Strategy: removed ${totalRemoved} candidates`);
        // }
        return { updatedCandidates: newCandidates, removed: totalRemoved };
        // return totalRemoved, newCandidates;
    }

    // 查找所有行X-Wing:Array<(row1, row2, col1, col2, digit)>
    findRowXwings(candidates){
        let rowXWings = [];
        for (let digit = 1; digit <= 9; digit++) {
            // 获得潜在的行X-Wing（也就是只有2个候选数的行）
            let rowsWith2Digits = [];
            let colsPairs = [];
            for (let row = 0; row < 9; row++) {
                let cols = this.findColumnsForNumber(row, digit, candidates);
                if (cols.length === 2) {
                    rowsWith2Digits.push(row);
                    colsPairs.push(cols);
                }
            }

            // 潜在的行看列是否也完全相同，相同则组成真正的行X-Wing
            const len = rowsWith2Digits.length;
            for (let i = 0; i < len - 1; i++) {
                for (let j = i + 1; j < len; j++) {
                    let row1 = rowsWith2Digits[i];
                    let row2 = rowsWith2Digits[j];
                    let colPair1 = colsPairs[i];
                    let colPair2 = colsPairs[j];
                    if (colPair1[0] === colPair2[0] && colPair1[1] === colPair2[1]) {
                        rowXWings.push([row1, row2, colPair1[0], colPair1[1], digit]);
                        // 排除同一行和多个行同时配对的情况，TODO：调研是否可以和多个行同时配对
                        break;
                    }
                }
            }
            
        }
        return rowXWings;
    }


    findColXwings(candidates){
        let colXWings = [];
        for (let digit = 1; digit <= 9; digit++) {
            // 获得潜在的列X-Wing（也就是只有2个候选数的列）
            let colsWith2Digits = [];
            let rowsPairs = [];
            for (let col = 0; col < 9; col++) {
                let rows = this.findRowsForNumber(col, digit, candidates);
                if (rows.length === 2) {
                    colsWith2Digits.push(col);
                    rowsPairs.push(rows);
                }
            }

            // 潜在的列看行是否也完全相同，相同则组成真正的列X-Wing
            const len = colsWith2Digits.length;
            for (let i = 0; i < len - 1; i++) {
                for (let j = i + 1; j < len; j++) {
                    let col1 = colsWith2Digits[i];
                    let col2 = colsWith2Digits[j];
                    let rowPair1 = rowsPairs[i];
                    let rowPair2 = rowsPairs[j];
                    if (rowPair1[0] === rowPair2[0] && rowPair1[1] === rowPair2[1]) {
                        colXWings.push([rowPair1[0], rowPair1[1], col1, col2, digit]);
                        // 排除同一列和多个列同时配对的情况，TODO：调研是否可以和多个列同时配对
                        break;
                    }
                }
            }
            
        }
        return colXWings;
    }


    removeRowCandidate(candidates, xwing) {
        let removed = 0;
        const [row1, row2, col1, col2, digit] = xwing;
        // let newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
        for (let row=0; row<9; row++){
            if(candidates[row][col1].includes(digit) && row !== row1 && row !== row2){
                candidates[row][col1] = candidates[row][col1].filter(d => d !== digit);
                removed++;
            }
            if(candidates[row][col2].includes(digit) && row !== row1 && row !== row2){
                candidates[row][col2] = candidates[row][col2].filter(d => d !== digit);
                removed++;
            }   
        }
        return removed;
    }

    removeColCandidate(candidates, xwing) {
        let removed = 0;
        const [row1, row2, col1, col2, digit] = xwing;
        // let newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据

        for (let col=0; col<9; col++){
            if(candidates[row1][col].includes(digit) && col !== col1 && col !== col2){
                candidates[row1][col] = candidates[row1][col].filter(d => d !== digit);
                removed++;
            }
            
            if(candidates[row2][col].includes(digit) && col !== col1 && col !== col2){
                candidates[row2][col] = candidates[row2][col].filter(d => d !== digit);
                removed++;
            }
        }
        return removed;
    }

  }
  
// 单元测试
// let json_input_candidate = "[[[],[],[],[],[9],[],[7,8,9],[7,8,9],[]],[[],[],[],[],[3,4],[],[1],[],[1,3]],[[],[],[],[],[],[3,9],[6,9],[3,6,9],[]],[[],[],[],[],[],[],[2,6],[2,6],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[1,5,8],[1,8],[1,5,8]],[[3,9],[],[2,6],[],[3,8,9],[3,5,6,9],[1,2,5,6,8,9],[1,2,3,6,8,9],[1,3,5,6,8]],[[],[],[2,6],[2],[3,7,8,9],[3,5,6,9],[2,5,6,7,8,9],[2,3,6,7,8,9],[3,5,6,8]],[[3,9],[],[],[1,2],[3,7,9],[3,6,9],[1,2,4,6,7,9],[1,2,3,6,7,9],[1,3,6]]]";
// let json_expect_output_candidate = "[[[],[],[],[],[9],[],[7,8,9],[7,8,9],[]],[[],[],[],[],[3,4],[],[1],[],[1,3]],[[],[],[],[],[],[3,9],[6,9],[3,6,9],[]],[[],[],[],[],[],[],[2,6],[2,6],[]],[[],[],[],[],[],[],[],[],[]],[[],[],[],[],[],[],[1,5,8],[1,8],[1,5,8]],[[3,9],[],[2,6],[],[3,8,9],[3,5,6,9],[1,2,5,8,9],[1,2,3,8,9],[1,3,5,6,8]],[[],[],[2,6],[2],[3,7,8,9],[3,5,6,9],[2,5,7,8,9],[2,3,7,8,9],[3,5,6,8]],[[3,9],[],[],[1,2],[3,7,9],[3,6,9],[1,2,4,7,9],[1,2,3,7,9],[1,3,6]]]";
// const input_candidate = JSON.parse(json_input_candidate);
// const expect_output_candidate = JSON.parse(json_expect_output_candidate);
// let strategy = new XWingStrategy();
// let actual_output_candidate = strategy.execute([],input_candidate, 10000).updatedCandidates;
// if (JSON.stringify(actual_output_candidate) === JSON.stringify(expect_output_candidate)) {
//     console.log("X-Wing Strategy Test passed");
// } else {
//     console.log("X-Wing Strategy Test failed");
// }