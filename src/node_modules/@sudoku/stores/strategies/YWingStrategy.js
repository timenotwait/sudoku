import { StrategyTemplate } from '../strategyTemplate'

export class YWingStrategy extends StrategyTemplate {
    constructor() {
        super("Y-Wing Strategy");
    }

    // 执行Y-Wing策略
    execute(grid, candidates, hint_step) {
        const newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
        // 记录总体移除的候选数
        let totalRemoved = 0;
        const maxIterOfStrategy = hint_step;
        // 设置迭代上限
        for (let i = 0; i < maxIterOfStrategy; i++) {
            let removed = 0;
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    if (this.isPivot(newCandidates[row][col])) {
                        const pivot = {row, col};
                        const wings = this.findWings(pivot, newCandidates);

                        for (let i = 0; i < wings.length; i++) {
                            let [pivot, wing1, wing2, sharedNum] = wings[i];
                            removed += this.applyYWingStrategy(pivot, wing1, wing2, sharedNum, newCandidates);
                        }
                    }
                }
            }
            totalRemoved += removed;
            if (removed === 0) {
                break;
            }
        }
        // if (totalRemoved !== 0) {
        //     console.log(`Y-Wing Strategy: removed ${totalRemoved} candidates`);
        // }
        return { updatedCandidates: newCandidates, removed: totalRemoved };
        // return totalRemoved, newCandidates;
    }

    // 判断是否是枢纽单元
    isPivot(cellCandidates) {
        return cellCandidates.length === 2;
    }

    // 查找可能的翼单元
    findWings(pivot, candidates) {
        let yWings = [];
        let leftWings = [];
        let rightWings = [];
        const [pivotNum1, pivotNum2] = candidates[pivot.row][pivot.col];

        for (let row = 0; row < 9; row++) {
            for (let col = 0; col < 9; col++) {
                if ((row !== pivot.row || col !== pivot.col) && this.inSameUnit(pivot, {row, col}) && this.isPivot(candidates[row][col])) {
                    // wings.push({row, col});
                    if (candidates[row][col].includes(pivotNum1) && !candidates[row][col].includes(pivotNum2)) {
                        leftWings.push({row, col});
                    } else if (candidates[row][col].includes(pivotNum2) && !candidates[row][col].includes(pivotNum1)) {
                        rightWings.push({row, col});
                    }
                }
            }
        }

        // 找有相同候选值的左翼和右翼，
        for (let i = 0; i < leftWings.length; i++) {
            for (let j = 0; j < rightWings.length; j++) {
                const [leftWingNum1, leftWingNum2] = candidates[leftWings[i].row][leftWings[i].col];
                if (candidates[rightWings[j].row][rightWings[j].col].includes(leftWingNum1) ){
                    yWings.push([pivot, leftWings[i], rightWings[j], leftWingNum1]);
                } else if (candidates[rightWings[j].row][rightWings[j].col].includes(leftWingNum2)) {
                    yWings.push([pivot, leftWings[i], rightWings[j], leftWingNum2]);
                }
            }
        }

        return yWings;
    }

    // 应用Y-Wing策略
    applyYWingStrategy(pivot, wing1, wing2, sharedNum, candidates) {
        let removed = 0;
        for (let row = 0; row < 9; row++) {
            for (let col = 0; col < 9; col++) {
                if (this.inSameUnit({row, col}, wing1) && this.inSameUnit({row, col}, wing2) 
                    && candidates[row][col].includes(sharedNum) 
                    && !this.isSameCell({row, col}, pivot) && !this.isSameCell({row, col}, wing1) && !this.isSameCell({row, col}, wing2)) {
                    candidates[row][col] = candidates[row][col].filter(num => num !== sharedNum);
                    removed++;
                }
            }
        }
        return removed;
        // }
    }
}

// 单元测试
// let json_input_candidate = "[[[2,4,5,7,8],[],[1,2,5,7,8],[1,3,5,7],[3,5],[],[1,7,8],[1,4,8],[1,3,4,5,7,8]],[[5,6,7],[1,5,6,7],[1,5,7],[],[],[],[1,6,7],[],[1,3,5,7]],[[4,5,6,7,8],[],[1,5,7,8],[1,5,7],[],[1,7],[1,6,7,8,9],[1,4,6,8,9],[1,4,5,7,8,9]],[[2,3,4,5,8,9],[4,5,8],[],[2,3,4,5],[],[2,3,4,9],[2,8,9],[],[8,9]],[[2,3,7,8,9],[1,7,8],[1,2,3,7,8,9],[2,3,7],[3,8],[2,3,7,9],[],[],[]],[[2,4,5,7,8,9],[1,4,5,7,8],[1,2,5,7,8,9],[2,4,5,7],[5,6,8],[2,4,7,9],[],[1,8,9],[1,8,9]],[[],[],[3,9],[],[],[3,4],[],[4,6,9],[4,9]],[[3,6,7,8,9],[6,7,8],[],[1,3],[3],[],[1,6,7,8,9],[1,6,8,9],[]],[[5,7,8],[5,7,8],[5,7,8],[],[],[1,2,4],[1,7,8],[],[1,4,7,8]]]";
// let json_expect_output_candidate = "[[[2,4,5,7,8],[],[1,2,5,7,8],[1,3,5,7],[3,5],[],[1,7,8],[1,4,8],[1,3,4,5,7,8]],[[5,6,7],[1,5,6,7],[1,5,7],[],[],[],[1,6,7],[],[1,3,5,7]],[[4,5,6,7,8],[],[1,5,7,8],[1,5,7],[],[1,7],[1,6,7,8,9],[1,4,6,8,9],[1,4,5,7,8,9]],[[2,3,4,5,8,9],[4,5,8],[],[2,3,4,5],[],[2,3,4,9],[2,8,9],[],[8,9]],[[2,3,7,8,9],[1,7,8],[1,2,3,7,8,9],[2,3,7],[3,8],[2,3,7,9],[],[],[]],[[2,4,5,7,8,9],[1,4,5,7,8],[1,2,5,7,8,9],[2,4,5,7],[5,6,8],[2,4,7,9],[],[1,8,9],[1,8,9]],[[],[],[3,9],[],[],[3,4],[],[6],[4,9]],[[3,6,7,8,9],[6,7,8],[],[1,3],[3],[],[1,6,7,8,9],[1,6,8,9],[]],[[5,7,8],[5,7,8],[5,7,8],[],[],[1,2,4],[1,7,8],[],[1,4,7,8]]]";
// const input_candidate = JSON.parse(json_input_candidate);
// const expect_output_candidate = JSON.parse(json_expect_output_candidate);
// let strategy = new YWingStrategy();
// let actual_output_candidate = strategy.execute([],input_candidate, 10000).updatedCandidates;
// if (JSON.stringify(actual_output_candidate) === JSON.stringify(expect_output_candidate)) {
//     console.log("Y-Wing Strategy Test passed");
// } else {
//     console.log("Y-Wing Strategy Test failed");
// }