import { StrategyTemplate } from '../strategyTemplate'

export class NakedSingleStrategy extends StrategyTemplate {
    constructor() {
        super("Naked Single Strategy");
    }

    // 执行Naked Single策略
    execute(grid, candidates, hint_step) {
        const newCandidates = JSON.parse(JSON.stringify(candidates)); // 深拷贝避免直接修改原数据
        // 记录总体移除的候选数
        let totalRemoved = 0;
        const maxIterOfStrategy = hint_step;
        // 设置迭代上限
        for (let i = 0; i < maxIterOfStrategy; i++) {
            let removed = 0;
            for (let row = 0; row < 9; row++) {
                for (let col = 0; col < 9; col++) {
                    if (this.isNakedSingle(newCandidates[row][col])) {
                        const number = newCandidates[row][col][0];
                        removed += this.updateCandidates(row, col, number, newCandidates);
                    }
                }
            }
            totalRemoved += removed;
            if (removed === 0) {
                break;
            }
        }

        return { updatedCandidates: newCandidates, removed: totalRemoved };
    }

    // 判断是否为Naked Single
    isNakedSingle(cellCandidates) {
        return cellCandidates.length === 1;
    }

    // 更新候选数字列表
    updateCandidates(row, col, number, candidates) {
        let removed = 0;
        // 移除当前行、列和小方块中的相同数字
        for (let i = 0; i < 9; i++) {
            // 移除当前行中的候选数字
            if (i !== col && candidates[row][i].includes(number)) {
                candidates[row][i] = candidates[row][i].filter(n => n !== number);
                removed++;
            }
            // 移除当前列中的候选数字
            if (i !== row && candidates[i][col].includes(number)) {
                candidates[i][col] = candidates[i][col].filter(n => n !== number);
                removed++;
            }
        }

        // 移除当前3x3小方块中的候选数字
        const startRow = Math.floor(row / 3) * 3;
        const startCol = Math.floor(col / 3) * 3;
        for (let r = startRow; r < startRow + 3; r++) {
            for (let c = startCol; c < startCol + 3; c++) {
                if ((r !== row || c !== col) && candidates[r][c].includes(number)) {
                    candidates[r][c] = candidates[r][c].filter(n => n !== number);
                    removed++;
                }
            }
        }
        return removed;
    }
}

// 单元测试
// let json_input_candidate = "[[[],[2,6,7,9],[],[1,4,6,7,9],[],[1,4,6,7],[1,7],[1,4,6],[4,6,9]],[[1,6,7,8,9],[6,7,8,9],[1,6,8,9],[],[4,6,7,9],[1,4,5,6,7],[],[1,4,5,6,8],[4,5,6,8,9]],[[1,6,7,8,9],[],[1,6,8,9],[1,3,5,6,7,9],[3,6,7,9],[1,3,5,6,7],[1,7,8],[1,5,6,8],[]],[[2,4,6,7,8],[],[4,6,8],[3,4,5,6,7],[3,4,6,7],[2,3,4,5,6,7,8],[2,8],[],[3,4,8]],[[2,4,6,8],[],[4,6,8],[4,6],[4,6],[],[],[1,2,4,8],[]],[[2,4,7,8,9],[2,7,8,9],[],[3,4,7],[],[2,3,4,7,8],[],[2,3,4,8],[3,4,8]],[[1,3,4,6,8,9],[6,8,9],[],[1,3,4,6,9],[],[1,3,4,6],[8],[],[3,6,8]],[[3,6,9],[5,6,9],[],[],[],[3,6],[],[3,5,6],[]],[[1,3,4,6,8],[5,6,8],[1,4,6,8],[1,3,4,6,7],[3,4,6,7],[1,3,4,6,7],[],[2,3,5,6,8],[3,5,6,8]]]";
// let json_expect_output_candidate = "[[[],[2,6,7,9],[],[1,4,6,7,9],[],[1,4,6,7],[1,7],[1,4,6],[4,6,9]],[[1,6,7,8,9],[6,7,8,9],[1,6,8,9],[],[4,6,7,9],[1,4,5,6,7],[],[1,4,5,6,8],[4,5,6,8,9]],[[1,6,7,8,9],[],[1,6,8,9],[1,3,5,6,7,9],[3,6,7,9],[1,3,5,6,7],[1,7],[1,5,6,8],[]],[[4,6,7,8],[],[4,6,8],[3,4,5,6,7],[3,4,6,7],[3,4,5,6,7,8],[2],[],[3,4,8]],[[2,4,6,8],[],[4,6,8],[4,6],[4,6],[],[],[1,4,8],[]],[[2,4,7,8,9],[2,7,8,9],[],[3,4,7],[],[2,3,4,7,8],[],[3,4,8],[3,4,8]],[[1,3,4,6,9],[6,9],[],[1,3,4,6,9],[],[1,3,4,6],[8],[],[3,6]],[[3,6,9],[5,6,9],[],[],[],[3,6],[],[3,5,6],[]],[[1,3,4,6,8],[5,6,8],[1,4,6,8],[1,3,4,6,7],[3,4,6,7],[1,3,4,6,7],[],[2,3,5,6],[3,5,6]]]";
// const input_candidate = JSON.parse(json_input_candidate);
// const expect_output_candidate = JSON.parse(json_expect_output_candidate);
// let strategy = new NakedSingleStrategy();
// let actual_output_candidate = strategy.execute([],input_candidate, 10000).updatedCandidates;
// if (JSON.stringify(actual_output_candidate) === JSON.stringify(expect_output_candidate)) {
//     console.log("Naked Single Strategy Test passed");
// } else {
//     console.log("Naked Single Strategy Test failed");
// }
