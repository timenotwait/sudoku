export class PastSolutionByStrategy {
    constructor() {
        // 是一个map,键为grid+strategyList,值为列表[(x, y, List:candidates[])]
        this.pastSolutionByStrategy = new Map();
    }
    //拼接出键
    mergeMatrixAndStrings(userGrid, strategyList, hint_step) {
        strategyList.sort();
        const matrixString = userGrid.map(row => row.join("")).join("");
        const stringListString = strategyList.join("");
        console.log(hint_step);
        return matrixString + stringListString + hint_step;
    }
    //增
    addUserGrid(userGrid, strategyList, strategy, hint_step) {
        let key = this.mergeMatrixAndStrings(userGrid,strategyList, hint_step);
        if (!this.pastSolutionByStrategy.has(key)) {
            this.pastSolutionByStrategy.set(key, strategy);
        }
    }
    //get
    getSolution(userGrid, strategyList, hint_step) {
        let key = this.mergeMatrixAndStrings(userGrid, strategyList, hint_step);
        return this.pastSolutionByStrategy.get(key);
    }
    //查字典中是否有这个键
    hasUserGrid(userGrid, strategyList, hint_step) {
        let key = this.mergeMatrixAndStrings(userGrid, strategyList, hint_step);
        return this.pastSolutionByStrategy.has(key) ? 1 : 0;
    }
    // 获取某个位置的candidate
    getPosCandidate(userGrid, strategyList, hint_step, x, y) {
        let key = this.mergeMatrixAndStrings(userGrid, strategyList, hint_step);
        // console.log(key);
        // console.log(this.pastSolutionByStrategy.get(key));
        for(const item of this.pastSolutionByStrategy.get(key)) {
            // console.log(item)
            if(x == item.x && y == item.y) {
                return item.candidates;
            }
        }
        return [];
    }
}
// export const pastSolutionByStrategy = new PastSolutionByStrategy();