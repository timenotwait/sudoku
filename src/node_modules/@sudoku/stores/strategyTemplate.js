export class StrategyTemplate {
    constructor(name) {
        if (new.target === StrategyTemplate) {
            throw new Error("StrategyTemplate is an abstract class and cannot be instantiated directly.");
        }
        this.name = name; // 策略名称
    }

    // 执行策略的方法，需要子类实现
    // grid: 数独的二维数组
    // candidates: 候选数的三维数组
    // hint_step: 提示的步数
    // 返回值：字典，包含以下字段：
    // - removed: 策略消除的候选值数量
    // - updatedCandidates: 更新后的三位候选值数组
    execute(grid, candidates, hint_step) {
        throw new Error("Subclasses must implement the execute method.");
    }

    // 在特定行中查找包含指定数字的所有列
    findColumnsForNumber(row, num, candidates) {
        let cols = [];
        for (let col = 0; col < 9; col++) {
        if (candidates[row][col].includes(num)) {
            cols.push(col);
        }
        }
        return cols;
    }

    // 在特定列中查找包含指定数字的所有行
    findRowsForNumber(col, num, candidates) {
        let rows = [];
        for (let row = 0; row < 9; row++) {
        if (candidates[row][col].includes(num)) {
            rows.push(row);
        }
        }
        return rows;
    }

    // 判断两个位置是否在同一行、列或3x3方块
    inSameUnit(pos1, pos2) {
        return (pos1.row === pos2.row || pos1.col === pos2.col || 
                Math.floor(pos1.row / 3) === Math.floor(pos2.row / 3) && Math.floor(pos1.col / 3) === Math.floor(pos2.col / 3));
    }

    // 判断两个位置是否相同
    isSameCell(cell1, cell2) {
        return cell1.row === cell2.row && cell1.col === cell2.col;
    }

}


