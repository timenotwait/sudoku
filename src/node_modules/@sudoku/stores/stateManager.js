import { SUDOKU_SIZE } from '@sudoku/constants';
import { encodeOriginSudoku } from '@sudoku/sencode/index'

function createStateManager() {
    const state_dict = new Map();   // key:index value:grid_state
    const index_dict = new Map();   // key:grid value:index
    // const candidate_dict = new Map();   // key:index value:candidate

    return {
        add_state(state) {
            // copy state
            // let newState = [];
            // for (let y = 0; y < SUDOKU_SIZE; y++) {
            //     newState[y] = [];
            //     for (let x = 0; x < SUDOKU_SIZE; x++) {
            //         newState[y][x] = state[y][x];
            //     }
            // }
            let newState = encodeOriginSudoku(state);

            if(!index_dict.has(newState)) {    // 没有则插入
                let index = state_dict.size;
                // console.log(state_dict.size);

                state_dict.set(index, newState);
                index_dict.set(newState, index);
                console.log(state_dict);
                console.log(index_dict);
                // console.log('get');
                // console.log(this.get_index(newState));
                // console.log('newState');
                // console.log(newState);
            }
            else {
                console.log('the state exist!');
            }
            // console.log(state_dict);
        }, 
        // add_candidate(candidate) {

        // },
        get_index(state) {
            console.log('get_index');
            console.log(state);
            return index_dict.get(encodeOriginSudoku(state));
        },
        get_state(index) {
            return state_dict.get(index);
        },
        get_state_dict() {
            return state_dict;
        },
        get_index_dict() {
            return index_dict;
        },
        clear() {
            state_dict.clear();
            index_dict.clear();
        }
    }
}

export const stateManager = createStateManager();